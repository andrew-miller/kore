Code representation in terms of other codes

If we have a means to represent codes by codes, then we just need a way to serialize values of an arbitrary code, and we have enough to build a code distribution system.

<code> bit <is> ['0, '1];
<code> 256b <is> {0 bit, '1 bit, '2 bit, '3 bit, '4 bit, '5 bit, '6 bit, '7 bit, '8 bit, '9 bit, '10 bit, '11 bit, '12 bit, '13 bit, '14 bit, '15 bit, '16 bit, '17 bit, '18 bit, '19 bit, '20 bit, '21 bit, '22 bit, '23 bit, '24 bit, '25 bit, '26 bit, '27 bit, '28 bit, '29 bit, '30 bit, '31 bit, '32 bit, '33 bit, '34 bit, '35 bit, '36 bit, '37 bit, '38 bit, '39 bit, '40 bit, '41 bit, '42 bit, '43 bit, '44 bit, '45 bit, '46 bit, '47 bit, '48 bit, '49 bit, '50 bit, '51 bit, '52 bit, '53 bit, '54 bit, '55 bit, '56 bit, '57 bit, '58 bit, '59 bit, '60 bit, '61 bit, '62 bit, '63 bit, '64 bit, '65 bit, '66 bit, '67 bit, '68 bit, '69 bit, '70 bit, '71 bit, '72 bit, '73 bit, '74 bit, '75 bit, '76 bit, '77 bit, '78 bit, '79 bit, '80 bit, '81 bit, '82 bit, '83 bit, '84 bit, '85 bit, '86 bit, '87 bit, '88 bit, '89 bit, '90 bit, '91 bit, '92 bit, '93 bit, '94 bit, '95 bit, '96 bit, '97 bit, '98 bit, '99 bit, '100 bit, '101 bit, '102 bit, '103 bit, '104 bit, '105 bit, '106 bit, '107 bit, '108 bit, '109 bit, '110 bit, '111 bit, '112 bit, '113 bit, '114 bit, '115 bit, '116 bit, '117 bit, '118 bit, '119 bit, '120 bit, '121 bit, '122 bit, '123 bit, '124 bit, '125 bit, '126 bit, '127 bit, '128 bit, '129 bit, '130 bit, '131 bit, '132 bit, '133 bit, '134 bit, '135 bit, '136 bit, '137 bit, '138 bit, '139 bit, '140 bit, '141 bit, '142 bit, '143 bit, '144 bit, '145 bit, '146 bit, '147 bit, '148 bit, '149 bit, '150 bit, '151 bit, '152 bit, '153 bit, '154 bit, '155 bit, '156 bit, '157 bit, '158 bit, '159 bit, '160 bit, '161 bit, '162 bit, '163 bit, '164 bit, '165 bit, '166 bit, '167 bit, '168 bit, '169 bit, '170 bit, '171 bit, '172 bit, '173 bit, '174 bit, '175 bit, '176 bit, '177 bit, '178 bit, '179 bit, '180 bit, '181 bit, '182 bit, '183 bit, '184 bit, '185 bit, '186 bit, '187 bit, '188 bit, '189 bit, '190 bit, '191 bit, '192 bit, '193 bit, '194 bit, '195 bit, '196 bit, '197 bit, '198 bit, '199 bit, '200 bit, '201 bit, '202 bit, '203 bit, '204 bit, '205 bit, '206 bit, '207 bit, '208 bit, '209 bit, '210 bit, '211 bit, '212 bit, '213 bit, '214 bit, '215 bit, '216 bit, '217 bit, '218 bit, '219 bit, '220 bit, '221 bit, '222 bit, '223 bit, '224 bit, '225 bit, '226 bit, '227 bit, '228 bit, '229 bit, '230 bit, '231 bit, '232 bit, '233 bit, '234 bit, '235 bit, '236 bit, '237 bit, '238 bit, '239 bit, '240 bit, '241 bit, '242 bit, '243 bit, '244 bit, '245 bit, '246 bit, '247 bit, '248 bit, '249 bit, '250 bit, '251 bit, '252 bit, '253 bit, '254 bit, '255 bit};
<code> label <is> 256b;
<code> hash <is> 256b;

<code> list(x) <is> ['nil, 'cons {'x x, 'next list(x)}];

If we have type polymorphism (otherwise just substitute):
A:
<code> codeRef <is> ['path list(label), 'code code, 'hash hash];
<code> code <is> {'tag ['product, 'union], 'labels list({'label label, 'code codeRef})};
disadvantage: someone can put the same code in the list twice, it is not blatantly obvious how a conforming implementation should behave. mandating that the first is picked could be done

If we have type polymorphism and (type polymorphic) abstract types:
B:
<code> code <is> {'tag ['product {}, 'union {}], 'labels map(label, codeRef)};

map could enforce canonicality so there would be no ambiguity like there is in A

disadvantages:
- (same for A and C) implementations might display the fields/variants to the user ordered by their label hash, which would encourage users to pointlessly create and publish new versions of their types just to switch the ordering, making version control unnessesarily difficult.
- (same for A) someone could hash a strongly connected component, but he could also hash something that points to a strongly connected component; this would encourage users to unnessesarily bundle code, allowing them to create something like "modules", which the whole point of this system is to prevent. the only reason codes can be bundled is to support mutual recursion.
unit = {'tag 'product, 'labels: <>};

c1 = {'tag 'union,
      'labels
        <a -> 'hash unit | h
        ,b -> 'hash unit | h
        >
     };
i.e: <code> c1 <is> ['a {}, 'b, {}];

c2 = {'tag 'union,
      'labels
        <a -> 'hash c1 | h
        ,b -> 'hash unit | h
        >
     };
i.e: <code> c2 <is> ['a c1, 'b {}];

c1h1 = {'hash: c1 | h, path: <>};
c1h2 = {'hash: c2 | h, path: <a>};
Hashes c1h1 and c1h2 refer to the same type.

Why this is a problem:
Imagine there is a service where one can submit a hash and retrieve the corresponding code, and anyone can publish a code/hash to it. The service doesn't want to / doesn't know how to decode/canonicalize the codes. There is another service that given any hash of a code, it will find other codes and relations that refer to it.
Bob publishes a relation that makes use of c1.
Eve retrieves Bob's relation along with c1.
Eve publishes some useful relations that use c1, but they refer to c1 by c1h2.
Alice retrieves Eve's relations that use c1 via c1h2.
Alice publishes some relations that make use of c1 via c1h2. Her implementation does not bother canonicalizing c1h2.
Joe retrieves Bob's relations.
Joe wants to find more relations that make use of c1. He only finds things that refer to c1 by c1h1, not the ones by c1h2.
Bob is in the same situation as Joe.
Bob's client would be able to derive c1h1 from c1h2 and search by both. This is not good though because if he knows n paths to c1, he must lookup using each hash by each of n paths.

The other issue is that if Alice retreives a code cr that refers to c1h1, but the service only maps c1h2 to c1, then Alice wont be able to fully resolve cr. Ideally there would be only one hash for every code.

code is an abstract type:
C:
same type as B, but made abstract

The abstract type has the following property:
The graph formed from a value of this type (excluding nodes referenced by hash) should form a single strongly connected component.

This prevents the second disadvantage of B, at the cost of introducing yet another abstract type, worse, that requires graph operations.

